---
title: Automatically Stop and Start App V2 Machines
objective: 
layout: docs
nav: firecracker
order: 65
---

<%= partial "/docs/partials/v2_transition_banner" %>

You can decide whether you want to automatically stop, or downscale, instances of your app when they're idle and automatically restart them when they're needed. Each instance of your app is running on a Fly machine. Fly Proxy controls automatically starting and automatically stopping machines according to settings in your `fly.toml` file, in either the `services` or `http_service` sections:

```toml
...
[[services]]
  auto_stop_machines = true
  auto_start_machines = true
...
```

```toml
...
[http_service]
  internal_port = 8080
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
...
```

## Default and recommended values

New V2 apps created using the `fly launch` command are automatically started and automatically stopped by default:

```toml
auto_stop_machines = true
auto_start_machines = true
```

Existing apps—or any apps that don't have these settings in `fly.toml`—are automatically started but not automatically stopped by default:

```toml
auto_stop_machines = false
auto_start_machines = true
```

In most cases, we recommend setting `auto_stop_machines` and `auto_start_machines` to the same value to avoid having instances that either never start or never stop. 

If `auto_start_machines = true` and `auto_stop_machines = false`, the proxy will start your instances but they will never be stopped automatically. If you have a reason to only stop instances manually, then these settings are just fine.

If `auto_start_machines = false` and `auto_stop_machines = true`, the proxy will scale your instances down but won't be able to start them again. If all of your instances are scaled down, then requests will start failing.

## How It Works

The Fly Proxy runs the process to stop and start machines automatically every few minutes.

When `auto_stop_machines = true` in your `fly.toml`, the proxy looks at machines running in a single region and uses the [`soft_limit` setting](/docs/reference/configuration/#the-http_service-section) for each machine to determine if there's excess capacity. If the proxy decides there's excess capcity, it will stop exactly one machine. The proxy repeats this process every few minutes, stopping only one machine per region, if needed, each time.

Fly Proxy considers all of the running instances of your app in a given region, such as `fra`, and determines excess capacity as follows:

* If there's more than one instance in the region:
  * the proxy determines how many instances are over their `soft_limit` setting and then calculates excess capacity: `excess capacity = num of instances - (num instances over soft limit + 1)`
  * if excess capacity is 1 or greater, then the proxy stops 1 instance
* If there's only one instance in the region:
  * the proxy checks if the instance has any traffic
  * if the instance has no traffic (a load of 0), then the proxy stops the instance

When `auto_start_machines = true` in your `fly.toml`, the Fly Proxy restarts an instance in the nearest region when required.

Fly Proxy determines when to start an instance as follows:

* The proxy waits for a request to your app.
* If all running instances are above their `soft_limit` setting, then the proxy starts a stopped instance from the nearest region (if there are any stopped instances).
* The proxy routes the request to the newly started instance.

## When to Stop and Start Machines Automatically, or Not

If your app has highly variable request workloads, then you can set `auto_stop_machines` and `auto_start_machines` to `true` to manage your instances as demand decreases and increases. This could reduce costs, because you'll never have to run excess instances to handle peak load; you'll only run and be charged for the number of machines that are needed at any given time.

The difference between this feature and what is typical in autoscaling, is that there's no specified maximum for creating new instances. It will automatically start only existing instances. For example, if you want to have a maximum of 10 instances available to service requests, then you need to create 10 instances of your app.

If you need your app to be “always on”, then you can set `auto_stop_machines` and `auto_start_machines` to `false`. Instances will scale down to zero if `auto_stop_machines` is set to `true` and there’s no traffic to your app.

